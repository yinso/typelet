// Generated by CoffeeScript 1.10.0
(function() {
  var AnyType, Type, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  util = require('./util');

  Type = require('./type');

  AnyType = (function(superClass) {
    extend(AnyType, superClass);

    function AnyType() {
      if (!(this instanceof AnyType)) {
        return new AnyType();
      }
      AnyType.__super__.constructor.call(this);
      util._mixin(this, {
        typeID: Type.typeID++
      });
    }

    AnyType.prototype.typeCategory = 'TypeVar';

    AnyType.prototype.signature = function() {
      return "0";
    };

    AnyType.prototype.isGeneric = function() {
      return true;
    };

    AnyType.prototype.isComposite = function() {
      return false;
    };

    AnyType.prototype.isPrimitive = function() {
      return false;
    };

    AnyType.prototype.canAssignFrom = function(type) {
      return true;
    };

    AnyType.prototype._toString = function(env) {
      return env.print(this);
    };

    AnyType.prototype.equal = function(type) {
      return type instanceof AnyType;
    };

    AnyType.prototype.isa = function(obj) {
      return true;
    };

    return AnyType;

  })(Type);

  util._mixin(Type, {
    makeAnyType: AnyType
  });

  module.exports = AnyType;

}).call(this);
