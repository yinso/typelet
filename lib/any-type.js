// Generated by CoffeeScript 1.10.0
(function() {
  var Type, TypeVariable,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  TypeVariable = (function(superClass) {
    extend(TypeVariable, superClass);

    TypeVariable.typeVarID = 0;

    function TypeVariable() {
      TypeVariable.__super__.constructor.call(this);
      this.typeVarID = TypeVariable.typeVarID++;
      this.resolved = null;
    }

    TypeVariable.prototype.signature = function() {
      return "any$" + this.typeVarID;
    };

    TypeVariable.prototype.isa = function(x) {
      return true;
    };

    TypeVariable.prototype.isGeneric = function() {
      return true;
    };

    TypeVariable.prototype.convert = function(x) {
      return x;
    };

    TypeVariable.prototype.equal = function(type) {
      return this === type;
    };

    TypeVariable.prototype.greater = function(type) {
      if (type instanceof TypeVariable) {
        return false;
      } else {
        return true;
      }
    };

    return TypeVariable;

  })(Type);

  module.exports = TypeVariable;

}).call(this);
