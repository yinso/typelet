// Generated by CoffeeScript 1.10.0
(function() {
  var AnyType, ArrayType, Type, errLib, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  util = require('./util');

  errLib = require('./error');

  Type = require('./type');

  AnyType = require('./any-type');

  ArrayType = (function(superClass) {
    extend(ArrayType, superClass);

    function ArrayType(innerType) {
      if (innerType == null) {
        innerType = AnyType();
      }
      if (!(this instanceof ArrayType)) {
        return new ArrayType(innerType);
      }
      ArrayType.__super__.constructor.call(this);
      util._mixin(this, {
        typeID: Type.typeID++,
        innerType: innerType
      });
    }

    ArrayType.prototype.typeCategory = 'Array';

    ArrayType.prototype.signature = function() {};

    ArrayType.prototype.isGeneric = function() {
      return this.innerType.isGeneric();
    };

    ArrayType.prototype.isComposite = function() {
      return true;
    };

    ArrayType.prototype.canAssignFrom = function(type) {
      return (type instanceof ArrayType) && this.innerType.equal(type.innerType);
    };

    ArrayType.prototype.build = ArrayType;

    ArrayType.prototype.isa = function(obj) {
      var item, j, len;
      if (obj instanceof Array) {
        for (j = 0, len = obj.length; j < len; j++) {
          item = obj[j];
          if (!this.innerType.isa(item)) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    ArrayType.prototype.outerIsa = function(obj) {
      return obj instanceof Array;
    };

    ArrayType.prototype._convert = function(ary, error, path, isExplicit) {
      var e, i, item, res;
      e = new errLib.ConvertError();
      res = (function() {
        var j, len, results;
        results = [];
        for (i = j = 0, len = ary.length; j < len; i = ++j) {
          item = ary[i];
          results.push(this.innerType._convert(item, e, path + "/" + i, isExplicit));
        }
        return results;
      }).call(this);
      if (e.hasErrors()) {
        return error.append(e);
      } else {
        return res;
      }
    };

    ArrayType.prototype.resolve = function(obj, resolver) {
      var current, i, item, j, len, type;
      current = null;
      if (obj.length === 0) {
        throw new Error("unable_to_resolve_array_type");
      }
      for (i = j = 0, len = obj.length; j < len; i = ++j) {
        item = obj[i];
        type = resolver.resolve(item);
        if (i === 0) {
          current = type;
        } else if (current.canAssignFrom(type)) {
          continue;
        } else if (type.canAssignFrom(current)) {
          current = type;
        } else {
          throw new Error("array_type_resolve:inner_types_incompatible: " + current + " <> " + type);
        }
      }
      return ArrayType(current);
    };

    ArrayType.prototype.equal = function(type) {
      return (type instanceof ArrayType) && this.innerType.equal(type.innerType);
    };

    ArrayType.prototype._toString = function(env) {
      return "Array<" + (env.print(this.innerType)) + ">";
    };

    return ArrayType;

  })(Type);

  Type.attachType(Array, ArrayType());

  util._mixin(Type, {
    ArrayType: ArrayType
  });

  module.exports = ArrayType;

}).call(this);
