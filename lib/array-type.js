// Generated by CoffeeScript 1.10.0
(function() {
  var ArrayType, Type,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  ArrayType = (function(superClass) {
    extend(ArrayType, superClass);

    ArrayType.isConstructor = true;

    ArrayType.outerIsa = function(x) {
      return x instanceof Array;
    };

    ArrayType.resolve = function(x, typeSpace) {
      var i, inner, item, j, len, next;
      inner = null;
      for (i = j = 0, len = x.length; j < len; i = ++j) {
        item = x[i];
        if (i === 0) {
          inner = typeSpace.resolve(item);
        } else {
          next = typeSpace.resolve(item);
          if (inner.contains(next)) {
            continue;
          } else if (next.contains(inner)) {
            inner = next;
          } else {
            throw new Error("un_assignable_type: " + inner + " <!> " + next);
          }
        }
      }
      return new ArrayType(inner, this.options);
    };

    function ArrayType(inner1, options) {
      this.inner = inner1;
      this.options = options != null ? options : {};
      ArrayType.__super__.constructor.call(this, this.options);
    }

    ArrayType.prototype.signature = function() {
      return "Array<" + (this.inner.signature()) + ">";
    };

    ArrayType.prototype.isa = function(x) {
      var item, j, len;
      if (this.outerIsa(x)) {
        for (j = 0, len = x.length; j < len; j++) {
          item = x[j];
          if (!this.inner.isa(x)) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    ArrayType.prototype.convert = function(x) {
      var i, item, j, len, results;
      if (x instanceof Array) {
        results = [];
        for (i = j = 0, len = x.length; j < len; i = ++j) {
          item = x[i];
          results.push(this.inner.cnvert(item));
        }
        return results;
      } else {
        throw new Error("not_a_valid_array: " + x);
      }
    };

    ArrayType.prototype.equal = function(type) {
      if (type instanceof ArrayType) {
        return this.inner.equal(type.inner);
      } else {
        return false;
      }
    };

    ArrayType.prototype.isGeneric = function() {
      return this.inner.isGeneric(x);
    };

    ArrayType.prototype._specialize = function(inner) {
      return new ArrayType(inner, this.options);
    };

    ArrayType.prototype.inspect = function() {
      return this.toString();
    };

    ArrayType.prototype.toString = function() {
      return "Array[" + (this.inner.toString()) + "]";
    };

    return ArrayType;

  })(Type);

  module.exports = ArrayType;

}).call(this);
