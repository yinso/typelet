// Generated by CoffeeScript 1.10.0
(function() {
  var AST, Check, IntegerExp, Type, typedASTEnv,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AST = require('astlet');

  Type = require('./type');

  require('./primitive-type');

  typedASTEnv = AST.baseEnv.nestEnv();

  typedASTEnv.define('integer', IntegerExp = (function(superClass) {
    extend(IntegerExp, superClass);

    function IntegerExp() {
      return IntegerExp.__super__.constructor.apply(this, arguments);
    }

    IntegerExp.prototype.getType = function() {
      return Type.baseEnv.get('integer');
    };

    return IntegerExp;

  })(AST.get('integer')));

  Check = (function() {
    function Check() {}

    Check.compile = function(exp) {
      return exp;
    };

    return Check;

  })();

  module.exports = Check;

}).call(this);
