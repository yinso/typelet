// Generated by CoffeeScript 1.10.0
(function() {
  var DependentType, Type,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  DependentType = (function(superClass) {
    extend(DependentType, superClass);

    function DependentType(baseType, constraint) {
      this.baseType = baseType;
      this.constraint = constraint;
      DependentType.__super__.constructor.call(this);
    }

    DependentType.prototype.isa = function(v) {
      return this.baseType.isa(v) && this.constraint(v);
    };

    DependentType.prototype.isGeneric = function() {
      return this.baseType.isGeneric();
    };

    return DependentType;

  })(Type);

  moduele.exports = DependentType;

}).call(this);
