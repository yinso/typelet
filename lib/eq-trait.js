// Generated by CoffeeScript 1.10.0
(function() {
  var AnyType, ArrayType, EqTrait, ObjectType, ProcedureType, ScalarType, typeA, typeB;

  ScalarType = require('./scalar-type');

  AnyType = require('./any-type');

  ProcedureType = require('./procedure-type');

  ArrayType = require('./array-type');

  ObjectType = require('./object-type');

  typeA = new AnyType();

  typeB = new AnyType();

  EqTrait = new Trait('Eq', [typeA], {
    '==': ProcedureType["native"]((function(a, b) {
      return !EqTrait.run('!=', a, b);
    }), new ProcedureType('!=', [typeA, typeA], ScalarType.Boolean)),
    '!=': ProcedureType["native"]((function(a, b) {
      return !EqTrait.run('==', a, b);
    }), new ProcedureType('!=', [typeA, typeA], ScalarType.Boolean))
  });

  EqTrait.implement([ScalarType.Integer], {
    '==': function(a, b) {
      return a === b;
    },
    '!=': function(a, b) {
      return a !== b;
    }
  });

  EqTrait.implement([ScalarType.Float], {
    '==': function(a, b) {
      return a === b;
    },
    '!=': function(a, b) {
      return a !== b;
    }
  });

  EqTrait.implement([ScalarType.Boolean], {
    '==': function(a, b) {
      return a === b;
    },
    '!=': function(a, b) {
      return a !== b;
    }
  });

  EqTrait.implement([ScalarType.String], {
    '==': function(a, b) {
      return a === b;
    },
    '!=': function(a, b) {
      return a !== b;
    }
  });

  EqTrait.implement([ScalarType.Date], {
    '==': function(a, b) {
      return a === b;
    },
    '!=': function(a, b) {
      return a !== b;
    }
  });

  EqTrait.implement([ArrayType], {
    '==': function(a, b) {
      var i, item, j, len;
      if (a.length !== b.length) {
        return false;
      }
      for (i = j = 0, len = a.length; j < len; i = ++j) {
        item = a[i];
        if (!EqTrait.run('==', item, b[i])) {
          return false;
        }
      }
      return true;
    }
  });

}).call(this);
