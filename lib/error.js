// Generated by CoffeeScript 1.10.0
(function() {
  var CannotConvertError, CannotImplicitConvertError, ConversionNotSupportedError, ConvertError, InvalidValueError, NotTypeOfError, util;

  util = require('./util');

  CannotConvertError = util._class({
    __super__: Error,
    constructor: function(type, value, context) {
      this.type = type;
      this.value = value;
      if (context == null) {
        context = CannotConvertError;
      }
      this.name = 'CannotConvert';
      this.message = "{type: " + this.type + ", value: " + this.value + "}";
      return Error.captureStackTrace(this, context);
    }
  });

  CannotImplicitConvertError = util._class({
    __super__: Error,
    constructor: function(type, value, context) {
      this.type = type;
      this.value = value;
      if (context == null) {
        context = CannotImplicitConvertError;
      }
      this.name = 'CannotImplicitConvert';
      this.message = "{type: " + this.type + ", value: " + this.value + "}";
      return Error.captureStackTrace(this, context);
    }
  });

  InvalidValueError = util._class({
    __super__: Error,
    constructor: function(type, value, context) {
      this.type = type;
      this.value = value;
      if (context == null) {
        context = InvalidValueError;
      }
      this.name = 'InvalidValue';
      this.message = "{type: " + this.type + ", value: " + this.value + "}";
      return Error.captureStackTrace(this, context);
    }
  });

  NotTypeOfError = util._class({
    __super__: Error,
    constructor: function(type, value, context) {
      this.type = type;
      this.value = value;
      if (context == null) {
        context = InvalidValueError;
      }
      this.name = 'NotTypeOf';
      this.message = "{type: " + this.type + ", value: " + this.value + "}";
      return Error.captureStackTrace(this, context);
    }
  });

  ConversionNotSupportedError = util._class({
    __super__: Error,
    constructor: function(type, context) {
      this.type = type;
      if (context == null) {
        context = ConversionNotSupportedError;
      }
      this.name = 'ConversionNotSupported';
      this.message = "for " + this.type;
      return Error.captureStackTrace(this, context);
    }
  });

  ConvertError = util._class({
    __super__: Error,
    constructor: function(context) {
      if (context == null) {
        context = ConvertError;
      }
      this.name = 'ConvertError';
      this.errors = {};
      return Error.captureStackTrace(this, context);
    },
    append: function(err) {
      var key, ref, results, val;
      if (err instanceof ConvertError) {
        ref = err.errors;
        results = [];
        for (key in ref) {
          val = ref[key];
          if (err.errors.hasOwnProperty(key)) {
            results.push(this.push(key, val));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    },
    push: function(path, error) {
      this.errors[path] = error;
      this.message = this.formatMessage();
    },
    hasErrors: function() {
      return Object.keys(this.errors).length > 0;
    },
    formatMessage: function() {
      var error, errors, key;
      errors = (function() {
        var ref, results;
        ref = this.errors;
        results = [];
        for (key in ref) {
          error = ref[key];
          results.push(key + ": " + error);
        }
        return results;
      }).call(this);
      return errors.join(";");
    }
  });

  module.exports = {
    ConvertError: ConvertError,
    ConversionNotSupportedError: ConversionNotSupportedError,
    NotTypeOfError: NotTypeOfError,
    InvalidValueError: InvalidValueError,
    CannotImplicitConvertError: CannotImplicitConvertError,
    CannotConvertError: CannotConvertError
  };

}).call(this);
