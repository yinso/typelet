// Generated by CoffeeScript 1.10.0
(function() {
  var Schema, Type, TypeEnv, util;

  Type = require('./type');

  util = require('./util');

  TypeEnv = require('./type-env');

  Schema = (function() {
    function Schema(schema) {
      if (schema == null) {
        schema = {};
      }
      if (!(this instanceof Schema)) {
        return new Schema(schema);
      }
      this.env = new TypeEnv();
      this.load(schema);
    }

    Schema.prototype.load = function(schema) {
      var item, key, ref1, results;
      this.top = schema;
      ref1 = schema.definitions || {};
      results = [];
      for (key in ref1) {
        item = ref1[key];
        results.push(this.define(key, item));
      }
      return results;
    };

    Schema.prototype.define = function(name, schema) {
      return this.env.define(name, this.buildOne(schema));
    };

    Schema.prototype.has = function(name) {
      return this.env.has(name);
    };

    Schema.prototype.get = function(name) {
      return this.env.get(name);
    };

    Schema.prototype.buildOne = function(schema) {
      var type;
      type = (function() {
        switch (schema.type) {
          case 'integer':
            return this._integer(schema);
          case 'number':
            return this._float(schema);
          case 'string':
            return this._string(schema);
          case 'boolean':
            return this._boolean(schema);
          case 'null':
            return this._null(schema);
          case 'array':
            return this._array(schema);
          case 'object':
            return this._object(schema);
          default:
            if (schema.type instanceof Array) {
              return this._typeOneOf(schema);
            } else if (schema.$ref) {
              return this._ref(schema);
            } else if (schema.oneOf) {
              return this._oneOf(schema);
            } else {
              throw new Error("Compiler:unknown_type: " + schema.type);
            }
        }
      }).call(this);
      if (schema["default"]) {
        return Type.PropertyType(null, type, schema["default"]);
      } else {
        return type;
      }
    };

    Schema.prototype._integer = function(schema) {
      return Type.Integer;
    };

    Schema.prototype._float = function(schema) {
      return Type.Float;
    };

    Schema.prototype._boolean = function(schema) {
      return Type.Boolean;
    };

    Schema.prototype._null = function(schema) {
      return Type.Null;
    };

    Schema.prototype._string = function(schema) {
      return Type.String;
    };

    Schema.prototype._typeOneOf = function(schema) {
      var type, types;
      types = (function() {
        var i, len, ref1, results;
        ref1 = schema.type;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          type = ref1[i];
          results.push(this.buildOne({
            type: type
          }));
        }
        return results;
      }).call(this);
      return Type.OneOfType(types);
    };

    Schema.prototype._oneOf = function(schema) {
      var type, types;
      types = (function() {
        var i, len, ref1, results;
        ref1 = schema.oneOf || [];
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          type = ref1[i];
          results.push(this.buildOne(type));
        }
        return results;
      }).call(this);
      return Type.OneOfType(types);
    };

    Schema.prototype._array = function(schema) {
      var itemType;
      itemType = this.buildOne(schema.items);
      return Type.ArrayType(itemType);
    };

    Schema.prototype._object = function(schema) {
      var inner, key, props;
      props = (function() {
        var ref1, results;
        ref1 = schema.properties || {};
        results = [];
        for (key in ref1) {
          inner = ref1[key];
          results.push(Type.PropertyType(key, this.buildOne(inner)));
        }
        return results;
      }).call(this);
      return Type.ObjectType(props);
    };

    Schema.prototype._array = function(schema) {
      var itemType;
      itemType = this.buildOne(schema.items);
      return Type.ArrayType(itemType);
    };

    Schema.prototype._object = function(schema) {
      var inner, key, props;
      props = (function() {
        var ref1, results;
        ref1 = schema.properties || {};
        results = [];
        for (key in ref1) {
          inner = ref1[key];
          results.push(Type.PropertyType(key, this.buildOne(inner)));
        }
        return results;
      }).call(this);
      return Type.ObjectType(props);
    };

    Schema.prototype._ref = function(schema) {
      var name;
      name = this._parseRef(schema.$ref);
      return this.env.get(name);
    };

    Schema.prototype._parseRef = function(ref) {
      var parsed;
      parsed = ref.split('/');
      return parsed[parsed.length - 1];
    };

    return Schema;

  })();

  util._mixin(Type, {
    Schema: Schema
  });

  module.exports = Schema;

}).call(this);
