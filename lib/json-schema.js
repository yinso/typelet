// Generated by CoffeeScript 1.10.0
(function() {
  var Builder, Type, util;

  Type = require('./type');

  util = require('./util');

  Builder = (function() {
    function Builder() {
      if (!(this instanceof Builder)) {
        return new Builder();
      }
    }

    Builder.prototype.build = function(schema) {
      switch (schema.type) {
        case 'integer':
          return this._integer(schema);
        case 'number':
          return this._float(schema);
        case 'string':
          return this._string(schema);
        case 'boolean':
          return this._boolean(schema);
        case 'null':
          return this._null(schema);
        case 'array':
          return this._array(schema);
        case 'object':
          return this._object(schema);
        default:
          if (schema.type instanceof Array) {
            return this._oneOfTypes(schema);
          } else if (schema.oneOf) {
            return this._oneOf(schema);
          } else {
            throw new Error("Compiler:unknown_type: " + schema.type);
          }
      }
    };

    Builder.prototype._integer = function(schema) {
      return Type.Integer;
    };

    Builder.prototype._float = function(schema) {
      return Type.Float;
    };

    Builder.prototype._boolean = function(schema) {
      return Type.Boolean;
    };

    Builder.prototype._null = function(schema) {
      return Type.Null;
    };

    Builder.prototype._string = function(schema) {
      return Type.String;
    };

    Builder.prototype._oneOfTypes = function(schema) {
      var type, types;
      types = (function() {
        var i, len, ref, results;
        ref = schema.type;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          type = ref[i];
          results.push(this.build({
            type: type
          }));
        }
        return results;
      }).call(this);
      return Type.OneOfType(types);
    };

    Builder.prototype._oneOf = function(schema) {
      var type, types;
      types = (function() {
        var i, len, ref, results;
        ref = schema.oneOf || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          type = ref[i];
          results.push(this.build(type));
        }
        return results;
      }).call(this);
      return Type.OneOfType(types);
    };

    Builder.prototype._array = function(schema) {
      var itemType;
      itemType = this.build(schema.items);
      return Type.ArrayType(itemType);
    };

    Builder.prototype._object = function(schema) {
      var inner, key, props;
      props = (function() {
        var ref, results;
        ref = schema.properties || {};
        results = [];
        for (key in ref) {
          inner = ref[key];
          results.push(Type.PropertyType(key, this.build(inner)));
        }
        return results;
      }).call(this);
      return Type.ObjectType(props);
    };

    return Builder;

  })();

  util._mixin(Type, {
    JsonSchema: Builder()
  });

  module.exports = Builder;

}).call(this);
