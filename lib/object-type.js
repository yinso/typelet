// Generated by CoffeeScript 1.10.0
(function() {
  var PropertyType, RecordType, Type,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  PropertyType = require('./property-type');

  RecordType = (function(superClass) {
    extend(RecordType, superClass);

    RecordType.isConstructor = true;

    RecordType.outerIsa = function(obj) {
      return obj instanceof Object;
    };

    RecordType.resolve = function(obj, typeSpace) {
      var key, props, val;
      props = [];
      for (key in obj) {
        val = obj[key];
        if (obj.hasOwnProperty(key)) {
          props.push(new PropertyType(key, typeSpace.resolve(val)));
        }
      }
      return new RecordType(props, this.options);
    };

    function RecordType(properties, options) {
      var j, len, prop, ref;
      this.properties = properties;
      this.options = options != null ? options : {};
      RecordType.__super__.constructor.call(this, this.options);
      ref = this.properties;
      for (j = 0, len = ref.length; j < len; j++) {
        prop = ref[j];
        if (!(prop instanceof PropertyType)) {
          throw new Error("invalid_property_type: " + prop);
        }
      }
    }

    RecordType.prototype.signature = function() {
      var prop, props;
      props = (function() {
        var j, len, ref, results;
        ref = this.properties;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          prop = ref[j];
          results.push(prop.signature());
        }
        return results;
      }).call(this);
      return "Object<" + (props.join(',')) + ">";
    };

    RecordType.prototype.isGeneric = function() {
      var j, len, ref, type;
      ref = this.properties;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (type.isGeneric()) {
          return true;
        }
      }
      return false;
    };

    RecordType.prototype.isa = function(obj) {
      var j, len, prop, ref;
      if (this.outerIsa(obj)) {
        ref = this.properties;
        for (j = 0, len = ref.length; j < len; j++) {
          prop = ref[j];
          if (obj.hasOwnProperty(prop.name)) {
            if (!prop.isa(obj[prop.name])) {
              return false;
            }
          }
        }
        return true;
      } else {
        return false;
      }
    };

    RecordType.prototype.sorted = function() {
      return [].concat(this.properties).sort(function(p1, p2) {
        if (p1.name === p2.name) {
          return 0;
        } else if (p1.name > p2.name) {
          return 1;
        } else {
          return -1;
        }
      });
    };

    RecordType.prototype.equal = function(type) {
      var i, j, len, prop, props, props2;
      if (type instanceof RecordType) {
        if (this.properties.length === type.properties.length) {
          props = this.sorted();
          props2 = type.sorted();
          for (i = j = 0, len = props.length; j < len; i = ++j) {
            prop = props[i];
            if (!prop.equal(props2[i])) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    };

    RecordType.prototype._specialize = function(props) {
      var normalized;
      normalized = this.merge(props);
      return new RecordType(normalized, this.options);
    };

    RecordType.prototype.merge = function(props) {
      var i, item, j, len, results;
      if (props.length !== this.properties.length) {
        throw new Error("record_type_merge: not_same_length");
      }
      results = [];
      for (i = j = 0, len = props.length; j < len; i = ++j) {
        item = props[i];
        if (item instanceof PropertyType) {
          results.push(item);
        } else {
          results.push(this.properties[i]);
        }
      }
      return results;
    };

    RecordType.prototype.inspect = function() {
      return this.toString();
    };

    RecordType.prototype.toString = function() {
      var prop, props;
      props = (function() {
        var j, len, ref, results;
        ref = this.properties;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          prop = ref[j];
          results.push(prop.toString());
        }
        return results;
      }).call(this);
      return "{" + (props.join(', ')) + "}";
    };

    return RecordType;

  })(Type);

  module.exports = RecordType;

}).call(this);
