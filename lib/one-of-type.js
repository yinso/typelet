// Generated by CoffeeScript 1.10.0
(function() {
  var OneOfType, Type,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  OneOfType = (function(superClass) {
    extend(OneOfType, superClass);

    function OneOfType(list1, options) {
      var j, len, ref, type;
      this.list = list1;
      this.options = options;
      OneOfType.__super__.constructor.call(this, this.options);
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (!(type instanceof Type)) {
          throw new Error("invalid_one_of_type_param: " + type);
        }
      }
    }

    OneOfType.prototype.signature = function() {
      var list, type;
      list = (function() {
        var j, len, ref, results;
        ref = this.list;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          type = ref[j];
          results.push(type.signature());
        }
        return results;
      }).call(this);
      return "OneOf<" + (list.join(',')) + ">";
    };

    OneOfType.prototype.isa = function(x) {
      var j, len, ref, type;
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (type.isa(x)) {
          return true;
        }
      }
      return false;
    };

    OneOfType.prototype.convert = function(x) {
      var e, error, j, len, ref, type;
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        try {
          return type.convert(x);
        } catch (error) {
          e = error;
          continue;
        }
      }
      throw new Error("invalid_one_of_conversion: " + x);
    };

    OneOfType.prototype.isGeneric = function() {
      var j, len, ref, type;
      ref = this.list;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (type.isGeneric()) {
          return true;
        }
      }
      return false;
    };

    OneOfType.prototype._specialize = function(list) {
      var normalized;
      normalized = this.merge(list);
      return new OneOfType(normalized, this.options);
    };

    OneOfType.prototype.merge = function(list) {
      var i, j, len, results, type;
      if (list.length !== this.list.length) {
        throw new Error("one_of_type:list_must_be_equal_length");
      }
      results = [];
      for (i = j = 0, len = list.length; j < len; i = ++j) {
        type = list[i];
        if (type instanceof Type) {
          results.push(type);
        } else {
          results.push(this.list[i]);
        }
      }
      return results;
    };

    return OneOfType;

  })(Type);

  module.exports = OrType;

}).call(this);
