// Generated by CoffeeScript 1.10.0
(function() {
  var OneOfType, Type, errLib, util,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  util = require('./util');

  errLib = require('./error');

  Type = require('./type');

  OneOfType = (function(superClass) {
    extend(OneOfType, superClass);

    function OneOfType(types) {
      var j, len, type;
      if (!(this instanceof OneOfType)) {
        return new OneOfType(types);
      }
      OneOfType.__super__.constructor.call(this);
      if (!(types instanceof Array)) {
        throw new Error("one_of_type_takes_array_of_types");
      }
      if (types.length === 0) {
        throw new Error("one_of_type_must_take_at_least_one_type");
      }
      for (j = 0, len = types.length; j < len; j++) {
        type = types[j];
        if (!type instanceof Type) {
          throw new Error("one_of_type_take_only_types: " + type);
        }
      }
      util._mixin(this, {
        typeID: Type.typeID++,
        innerTypes: types
      });
    }

    OneOfType.prototype.category = 'OneOfType';

    OneOfType.prototype.sortedTypes = function() {
      return [].concat(this.innerTypes).sort(function(a, b) {
        return a.typeID < b.typeID;
      });
    };

    OneOfType.prototype.isa = function(obj) {
      var j, len, ref, type;
      ref = this.innerTypes;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        if (type.isa(obj)) {
          return true;
        }
      }
      return false;
    };

    OneOfType.prototype._convert = function(val, error, path, isExplicit) {
      var e, error1, j, len, ref, type;
      ref = this.innerTypes;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        try {
          return type._convert(val, new errLib.ConvertError(), path, isExplicit);
        } catch (error1) {
          e = error1;
          continue;
        }
      }
      return error.push(new errLib.CannotConvertError(this, val));
    };

    OneOfType.prototype.canAssignFrom = function(type) {
      var inner, j, len, ref;
      if (type instanceof OneOfType) {
        return this.equal(type);
      } else {
        ref = this.innerTypes;
        for (j = 0, len = ref.length; j < len; j++) {
          inner = ref[j];
          if (inner.canAssignFrom(type)) {
            return true;
          }
        }
        return false;
      }
    };

    OneOfType.prototype.equal = function(type) {
      var i, j, len, sortedA, sortedB;
      if (type instanceof OneOfType) {
        if (this.innerTypes.length !== type.innerTypes.length) {
          return false;
        }
        sortedA = this.sortedTypes();
        sortedB = type.sortedTypes();
        for (i = j = 0, len = sortedA.length; j < len; i = ++j) {
          type = sortedA[i];
          if (!type.equal(sortedB[i])) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    OneOfType.prototype.resolve = function(obj, resolver) {
      var e, error1, j, len, ref, type;
      ref = this.innerTypes;
      for (j = 0, len = ref.length; j < len; j++) {
        type = ref[j];
        try {
          return type.resolve(obj, resolver);
        } catch (error1) {
          e = error1;
          continue;
        }
      }
      throw new Error("unknown_type: " + obj);
    };

    OneOfType.prototype._toString = function(env) {
      var type, types;
      types = (function() {
        var j, len, ref, results;
        ref = this.innerTypes;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          type = ref[j];
          results.push(type._toString(env));
        }
        return results;
      }).call(this);
      return "OneOf[" + (types.join(',')) + "]";
    };

    return OneOfType;

  })(Type);

  Type.baseEnv.define('oneOf', OneOfType);

  module.exports = OneOfType;

}).call(this);
