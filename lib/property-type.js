// Generated by CoffeeScript 1.10.0
(function() {
  var PropertyType, Type,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  PropertyType = (function(superClass) {
    extend(PropertyType, superClass);

    function PropertyType(name, type1, _default) {
      this.name = name;
      this.type = type1;
      this["default"] = _default;
      if (arguments.length === 3) {
        if (!this.type.isa(this["default"])) {
          throw new Error("invalid_default_for_property_type: " + this["default"]);
        }
      }
    }

    PropertyType.prototype.signature = function() {
      return this.name + ": " + (this.type.signature());
    };

    PropertyType.prototype.isa = function(x) {
      return this.type.isa(x);
    };

    PropertyType.prototype.convert = function(x) {
      if (this["default"] && !x) {
        return this["default"];
      } else {
        return this.type.convert(x);
      }
    };

    PropertyType.prototype.equal = function(type) {
      return (type instanceof PropertyType) && this.name === type.name && this.type.equal(type.type);
    };

    PropertyType.prototype.isGeneric = function() {
      return this.type.isGeneric();
    };

    PropertyType.prototype._specialize = function(type) {
      return new PropertyType(this.name, type, this["default"]);
    };

    PropertyType.prototype.inspect = function() {
      return this.toString();
    };

    PropertyType.prototype.toString = function() {
      if (this["default"]) {
        return this.name + ": " + (this.type.toString()) + " = " + (this["default"].toString());
      } else {
        return this.name + ": " + (this.type.toString());
      }
    };

    return PropertyType;

  })(Type);

  module.exports = PropertyType;

}).call(this);
