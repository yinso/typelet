// Generated by CoffeeScript 1.10.0
(function() {
  var BooleanType, DateType, FloatType, IntegerType, NullType, ScalarType, StringType, Type, UnitType, addConverters,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  ScalarType = (function(superClass) {
    extend(ScalarType, superClass);

    function ScalarType(options) {
      if (!options.isa && (options["typeof"] && options["instanceof"])) {
        options.isa = function(x) {
          return (typeof x === options["typeof"]) || (x instanceof options["instanceof"]);
        };
      }
      this.name = options.name || this.typeID;
      ScalarType.__super__.constructor.call(this, options);
    }

    ScalarType.prototype.signature = function() {
      return this.name + "$" + this.typeID;
    };

    ScalarType.prototype.equal = function(type) {
      return this === type;
    };

    ScalarType.prototype.inspect = function() {
      return this.toString();
    };

    ScalarType.prototype.toString = function() {
      return "" + this.name;
    };

    return ScalarType;

  })(Type);

  ScalarType.String = StringType = new ScalarType({
    name: 'string',
    "typeof": 'string',
    "instanceof": String
  });

  ScalarType.Unit = UnitType = new ScalarType({
    name: 'unit',
    isa: function(x) {
      return x === void 0;
    },
    converters: [
      [
        StringType, function(x) {
          if (x === 'undefined') {
            return void 0;
          } else {
            throw new Error("unable_to_convert: " + x);
          }
        }
      ]
    ]
  });

  ScalarType.Null = NullType = new ScalarType({
    name: 'null',
    isa: function(x) {
      return x === null;
    },
    converters: [
      [
        StringType, function(x) {
          if (x === 'null') {
            return null;
          } else {
            throw new Error("unable_to_convert: " + x);
          }
        }
      ]
    ]
  });

  ScalarType.Float = FloatType = new ScalarType({
    name: 'float',
    "typeof": 'number',
    "instanceof": Number,
    converters: [
      [
        new ScalarType({
          base: StringType,
          constraint: {
            check: function(x) {
              return x.match(/^[+|-]?\d+(\.\d+)?([e|E]\d+)?$/);
            }
          }
        }), parseFloat
      ]
    ]
  });

  ScalarType.Integer = IntegerType = new ScalarType({
    base: FloatType,
    name: 'integer',
    "typeof": 'number',
    "instanceof": Number,
    constraint: {
      check: function(x) {
        return Math.floor(x) === x;
      }
    },
    converters: [
      [
        new ScalarType({
          base: StringType,
          constraint: {
            check: function(x) {
              return x.match(/^[+|-]?\d+$/);
            }
          }
        }), parseInt
      ]
    ]
  });

  ScalarType.Boolean = BooleanType = new ScalarType({
    name: 'bool',
    "typeof": 'boolean',
    "instanceof": Boolean,
    converters: [
      [
        StringType, function(x) {
          if (x === 'true') {
            return true;
          } else if (x === 'false') {
            return false;
          } else {
            throw new Error("invalid_boolean_value: " + x);
          }
        }
      ], [
        IntegerType, function(x) {
          if (x === 0) {
            return false;
          } else {
            return true;
          }
        }
      ]
    ]
  });

  ScalarType.Date = DateType = new ScalarType({
    name: 'date',
    isa: function(x) {
      return x instanceof Date;
    },
    converters: [
      [
        StringType, function(x) {
          return new Date(x);
        }
      ], [
        IntegerType, function(x) {
          return new Date(x);
        }
      ]
    ]
  });

  addConverters = function(type, converters) {
    var converter, i, isa, len, ref, ref1, results;
    ref = converters || [];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      ref1 = ref[i], isa = ref1[0], converter = ref1[1];
      results.push(type.addConverter(isa, converter));
    }
    return results;
  };

  addConverters(StringType, [
    [
      UnitType, function(x) {
        return 'undefined';
      }
    ], [
      NullType, function(x) {
        return 'null';
      }
    ], [
      BooleanType, function(x) {
        if (x === 'true') {
          return 'true';
        } else {
          return 'false';
        }
      }
    ], [
      IntegerType, function(x) {
        return x.toString();
      }
    ], [
      FloatType, function(x) {
        return x.toString();
      }
    ], [
      DateType, function(x) {
        return x.toISOString();
      }
    ]
  ]);

  module.exports = ScalarType;

}).call(this);
