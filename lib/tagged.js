// Generated by CoffeeScript 1.10.0
(function() {
  var TaggedType, Type,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Type = require('./type');

  TaggedType = (function(superClass) {
    extend(TaggedType, superClass);

    function TaggedType(name, args) {
      this.name = name;
      this.args = args != null ? args : [];
    }

    TaggedType.prototype.canConvert = function(v) {
      if (v instanceof Object && v.__type === this.name) {
        return true;
      } else {
        return false;
      }
    };

    TaggedType.prototype.equal = function(type) {
      var i, j, len, ref, t;
      if (type instanceof NamedType && this.name === type.name && this.args.length === type.args.length) {
        ref = this.args;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          t = ref[i];
          if (!t.equal(type.args[i])) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    return TaggedType;

  })(Type);

  module.exports = TaggedType;

}).call(this);
