// Generated by CoffeeScript 1.10.0
(function() {
  var TypeEnv;

  TypeEnv = (function() {
    function TypeEnv(prev) {
      if (prev == null) {
        prev = null;
      }
      if (prev !== null && !(prev instanceof TypeEnv)) {
        throw new Error("TypeEnv.ctor:prev_must_be_typeenv_or_null");
      }
      if (!(this instanceof TypeEnv)) {
        return new TypeEnv(prev);
      }
      this.inner = {};
      this.id = 0;
      this.prev = prev;
      this.binders = [];
    }

    TypeEnv.prototype.bind = function(typeVar, typeVal) {
      var i, key, len, ref, ref1, val;
      ref = this.binders;
      for (i = 0, len = ref.length; i < len; i++) {
        ref1 = ref[i], key = ref1[0], val = ref1[1];
        if (key === typeVar && !val.equal(typeVal)) {
          throw new Error("duplicate_binding: " + key + " already bound to " + val);
        }
      }
      return this.binders.push([typeVar, typeVal]);
    };

    TypeEnv.prototype.define = function(name, type) {
      if (this.inner.hasOwnProperty(name)) {
        throw new Error("TypeEnv.define:duplicate_key: " + name);
      }
      return this.inner[name] = type;
    };

    TypeEnv.prototype.get = function(name) {
      if (!this.has(name)) {
        throw new Error("TypeEnv.get:unknown_type: " + name);
      }
      return this.inner[name];
    };

    TypeEnv.prototype.has = function(name) {
      return this.inner.hasOwnProperty(name);
    };

    TypeEnv.prototype.pushEnv = function() {
      return new TypeEnv(this);
    };

    TypeEnv.prototype.popEnv = function() {
      return this.prev;
    };

    TypeEnv.prototype.push = function(type, key) {
      var k, ref, val;
      if (key == null) {
        key = void 0;
      }
      if (key) {
        if (this.inner.hasOwnProperty(key)) {
          throw new Error("duplicate_key: " + key);
        } else {
          this.inner[key] = type;
          return key;
        }
      } else {
        ref = this.inner;
        for (k in ref) {
          val = ref[k];
          if (val === type) {
            return k;
          }
        }
        key = this.id++;
        this.inner[key] = type;
        return key;
      }
    };

    TypeEnv.prototype.getKey = function(type) {
      var key, ref, val;
      ref = this.inner;
      for (key in ref) {
        val = ref[key];
        if (val === type) {
          return key;
        }
      }
      throw new Error("unknown_type: " + type);
    };

    TypeEnv.prototype.print = function(type) {
      var key;
      if (type.typeCategory !== 'TypeVar') {
        return type.toString();
      } else {
        key = this.push(type);
        return "T_" + key;
      }
    };

    return TypeEnv;

  })();

  module.exports = TypeEnv;

}).call(this);
