// Generated by CoffeeScript 1.10.0
(function() {
  var _class, _extend, _inherits, _isFunction, _mixin, _new, _props,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _extend = function() {
    var i, key, len, obj, objs, res, val;
    objs = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    res = {};
    for (i = 0, len = objs.length; i < len; i++) {
      obj = objs[i];
      for (key in obj) {
        val = obj[key];
        if (obj.hasOwnProperty(key)) {
          res[key] = val;
        }
      }
    }
    return res;
  };

  _props = function(obj, config) {
    var key, res, val;
    if (config == null) {
      config = {};
    }
    res = {};
    for (key in obj) {
      val = obj[key];
      if (obj.hasOwnProperty(key)) {
        res[key] = {
          value: val,
          writable: (config.writable instanceof Array) && indexOf.call(config.writable, key) >= 0,
          configurable: (config.configurable instanceof Array) && indexOf.call(config.configurable, key) >= 0,
          enumerable: (config.enumerable instanceof Array) && indexOf.call(config.enumerable, key) >= 0
        };
      }
    }
    return res;
  };

  _mixin = function(obj, options) {
    return Object.defineProperties(obj, _props(options));
  };

  _isFunction = function(func) {
    return typeof func === 'function' || func instanceof Function;
  };

  _class = function(options) {
    var ctor, parent;
    if (options == null) {
      options = {};
    }
    ctor = options.hasOwnProperty('constructor') && _isFunction(options.constructor) ? options.constructor : function() {};
    parent = _isFunction(options.__super__) ? options.__super__ : Object;
    ctor.prototype = _new(parent, _extend({
      constructor: ctor
    }, options));
    _mixin(ctor, {
      __super__: parent
    });
    return ctor;
  };

  _new = function(ctor, options, configs) {
    if (!_isFunction(ctor)) {
      throw new Error("_new_requires_ctor_to_be_function");
    }
    return Object.create(ctor.prototype, _props(options, configs));
  };

  _inherits = function(_class, _ancestor) {
    if (!(_isFunction((function() {
      function _Class() {}

      return _Class;

    })()) && _isFunction(_ancestor))) {
      throw new Error("inherit_expects_functions");
    }
    return _class.prototype instanceof _ancestor;
  };

  module.exports = {
    _extend: _extend,
    _props: _props,
    _mixin: _mixin,
    _isFunction: _isFunction,
    _class: _class,
    _new: _new,
    _inherits: _inherits
  };

}).call(this);
